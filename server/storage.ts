import { 
  users, type User, type InsertUser,
  countries, type Country, type InsertCountry,
  regions, type Region, type InsertRegion,
  gameSessions, type GameSession, type InsertGameSession,
  type RegionPiece
} from "@shared/schema";
// Import directly from the client directory
import { initialCountries } from "../client/src/data/countries";

// Define Nigerian regions based on the provided SVG data
const sampleRegions: { [key: number]: RegionPiece[] } = {
  1: [
    {
      id: 1,
      name: "Abia",
      svgPath: "M290.66,491.93L291.26,492.7L296.09,491.81L298.8,492.08L300.85,493.42L301.18,494.88L301.18,494.88L301.25,499.24L300.7,502.1L300.75,502.83L301.69,503.86L315.78,504.72L317.02,506.58L317.24,508.77L317.94,509.81L321.15,512.14L322.49,512.35L322.49,512.35L323.57,513.64L322.98,517.36L323.13,521.14L324.5,525.77L325.23,527.45L326.94,529.45L327.7,532L327.1,533.21L323.68,532.45L323.68,532.45L320.99,529.84L318.45,529L315.69,526.86L315.11,524.75L313.48,523.61L310.09,516.92L308.15,515.84L307.44,513.61L306.05,512.86L304.21,510.76L303.08,509.96L301.78,507.76L296.84,507.25L295.08,506.4L293.5,504.82L291.67,504.18L290.87,502.44L291.24,500.03L289.43,498.76L288.71,496.46L288.98,495.59L290.66,491.93z",
      correctX: 300,
      correctY: 510,
      isPlaced: false,
      fillColor: "#EF4444",
      strokeColor: "#991B1B"
    },
    {
      id: 2,
      name: "Adamawa",
      svgPath: "M682.29,187.44L682.16,189.27L681.34,191.03L680.32,192.6L679.22,193.43L677.45,196.33L676.09,201.22L673.43,203.67L672.95,204.77L672.34,207.78L673.06,211.39L673.83,212.45L673.83,214.15L672.22,215.81L671.96,220.42L670.99,222.09L671.12,225.54L670.34,227.48L668.29,230.05L668.03,233.07L666.42,234.11L664.98,236.72L659.11,237.88L654.93,243.76L655.08,244.74L656.62,246.36L656.66,247L655.51,249.74L653.66,251.13L653.63,252.9L654.32,254.5L657.05,256.35L657.05,258.58L656.59,261.33L656.49,267.55L657.42,269.2L657.35,270.58L665.07,270.75L669.49,268.98L671.96,268.89L672.38,269.8L677.1,271.06L679.26,270.04L681.61,270.26L684.03,270.01L686.73,267.81L687.77,267.27L689.83,267.47L691.84,267.05L696.63,264.88L698.45,264.71L701.51,265.26L703.38,264.54L706.55,264.56L712.12,261.9L712.12,261.9L712.66,261.34L713.4,258.93L713.81,257.86L714.86,257.36L712.74,254.01L712.98,252.06L714.95,249.54L715.56,247.64L712.46,242.63L712.55,241.15L711.35,238.84L711.42,234.5L710.72,232.04L709.13,229.82L705.66,224.51L703.81,223.74L703.32,222.04L703.7,217.81L702.76,215.47L702.88,211.44L702.2,209.1L701.85,207.11L702.14,201.53L702.62,200.75L703.64,200.98L704.09,198.89L701.25,196.28L702.83,193.55L702.05,186.6L701.32,185.57L693.11,185.05L692.26,182.32L692.52,181.47L693.41,181.33L693.92,180.26L693.38,178.3L693.68,177.4L696.3,175.51L697.05,172.12L696.65,170.76L696.95,169.82L699.08,165.18L699.77,162.97L699.46,160.34L699.72,158.36L700.26,157.05L700.29,155.27L699.66,152.99L699.01,152.27L697.15,150.82L694.82,149.63L693.39,148.22L690.49,143.1L688.62,141.27L683.8,139.35L681.29,139.34L679.03,140.44L678.14,141.55L677.61,143.54L677.21,148.56L674.3,148.22L672.03,149.39L671.18,149.9L666.93,147.78L669.31,145.33L670.28,145.09L672.17,142.49L672.91,141.84L682.29,187.44z",
      correctX: 680,
      correctY: 220,
      isPlaced: false,
      fillColor: "#F97316",
      strokeColor: "#9A3412"
    },
    {
      id: 3,
      name: "Akwa Ibom",
      svgPath: "M350.44,577.33l0.88,2.09l-0.76,0.82l-1.07,0.22l-0.22,-1.24l0.56,-0.1l0.35,-0.9L350.44,577.33zM298.88,566.26l-0.12,-1.85l-1.79,-3.36l0.67,-1.63l-0.02,-1.17l-0.59,-0.67l-0.22,-1.47l0.47,-0.65l-0.09,-0.77l2.52,-1.94l1.18,-2.89l-0.66,-2.49l0.02,-2.41l1.21,-5.81l-1.07,-1.94l0.07,-0.75l1.1,-0.56l1.56,0.19l0.64,-0.94l0.76,-2.85l2.74,-2.04l2.34,-3.63l4.71,-1.93l0.39,0.27l0.19,1.65l-0.44,1.28l-0.06,1.75l-0.7,1.87l-1.24,1.22l0.11,0.75l2.3,1.25l1.21,2.8l-1.47,2.47l-0.98,3.16l0.1,2.69l0.85,2.48l0.87,0.98l0.83,-0.5l0.73,-1.22l0.65,-0.38l0.67,0.15l0.07,0.88l-0.82,1.59l-0.06,1.57l1.32,0.88l2.98,0.78l-0.73,1.48l-3.57,1.22l-1.07,0.83l-0.85,1.36l-0.95,0.29l-1.05,-0.58l-0.85,0.15l-0.84,1.24l0.37,1.21l-0.37,0.97l-0.78,0.4l-0.73,0.98l-1.84,0.05L313,570.04l-0.9,0.5l-0.06,0.63l-0.73,0.63l-1.46,0.23l-1.51,-0.28l-2.23,0.18l-1.09,-0.68l-0.9,0.75l-0.88,-0.06l-1.18,-0.76l-1.07,0.15l-1.12,-0.91l-0.94,0.32L298.88,566.26zM310.13,584.89l0.97,0.5l0.92,-0.19l0.88,-0.14l0.33,0.28l-3.58,0.75l-0.49,-0.59L310.13,584.89zM302.56,585.59v0.01l0,0l-0.02,-0.02l0,0L302.56,585.59z",
      correctX: 320,
      correctY: 560,
      isPlaced: false,
      fillColor: "#FACC15",
      strokeColor: "#854D0E"
    },
    {
      id: 4,
      name: "Anambra",
      svgPath: "M262.32,445.18L262.76,445.58L262.85,449.2L266.68,449.07L269.12,450.48L271.17,450.56L274.9,452.26L275.26,453.05L274.01,456.5L273.26,457.58L271.57,458.72L269.72,461.2L269.96,462.16L269.34,462.99L268.91,465.34L269.3,465.88L273.15,467.04L274.57,468.84L275.91,472.48L277.22,474.33L276.92,475.29L276.1,475.58L276.51,476.95L276.01,478.57L276.73,479.31L278.62,478.18L279.23,478.31L279.82,480.89L281.15,481.52L280.8,483.67L282.68,487.46L282.86,489.31L281.1,490.33L278.11,493.23L277.28,493.26L277.28,493.26L275.95,493.69L274.29,490.22L274.06,486.66L274.25,484.87L272.61,484.3L272.1,483.79L271.66,484.52L269.96,485.24L267.71,484.85L265.66,483.79L264.49,481.93L260.53,480.23L260.04,479.63L259.93,478.59L261.13,469.48L260.71,463.13L260.91,461.15L260.89,457.01L261.41,447.93L262.07,446.08L262.32,445.18z",
      correctX: 270,
      correctY: 470,
      isPlaced: false,
      fillColor: "#84CC16",
      strokeColor: "#3F6212"
    },
    {
      id: 5,
      name: "Bauchi",
      svgPath: "M491.59,87.79L499.33,93.98L500.47,96.91L501.24,103.99L501.05,105.8L504.21,110.46L504.42,117.2L504.75,119.9L505.7,122.61L505.9,126.48L514.25,147.39L514.02,152.31L512.97,155.03L511.98,161.81L513.61,163.34L516.65,163.71L516.65,163.71L515.85,163.95L513.14,167.71L507.1,170.99L504.53,174.69L502.52,176.44L501.03,177.2L497.12,178.08L495.68,179.44L494.3,181.47L493.33,186.41L490.72,193.84L487.11,198.91L486.91,200.29L494.29,203.28L495.43,204.27L499.26,205.52L499.26,205.52L500.01,206.51L500.05,207.79L500.05,213.07L504.19,213.11L504.89,215.71L505.68,216.95L508.81,220.65L510.33,221.19L512.28,221.07L513.15,222.35L513.27,225.93L514.77,229.25L516,229.25L517.05,226.06L532.74,225.93L536.95,224.11L539.66,224.19L541.29,225.41L546.31,225.34L547.33,225.09L549.43,223.21L553.96,220.87L555.33,220.78L558.56,222.69L558.56,222.69L557.96,227.82L555.53,224.31L554.72,221.48L559.9,213.92L560.52,210.9L559.17,207.6L559.17,207.6L552.39,207.61L551.32,200.65L552.52,188.8L551.85,183.93L548.17,180.55L546.59,181.57L547.59,180.03L544.17,176.45L539.42,170.05L530.93,163.79L528.75,162.5L525.77,161.49L521.73,161.32L517.56,162.83L516.65,163.71L516.65,163.71L504.02,162.29L499.75,160.14L498.71,158.6L497.28,150.26L497.66,149.45L498.43,149.43L499.15,148.6L498.41,146.82L495.06,141.23L493.95,139.86L488.75,139.68L488.14,126.3L483.83,121.3L481.26,117.7L478.29,114.76L476.21,107.94L472.34,107.66L469.32,106.35L466.11,102.22L464.92,100.14L463.5,94.9L463.86,113.96L470.57,93.37L475.11,91.42L478.59,90.87L479.58,91.69L480.41,93.33L480.53,94.72L491.59,87.79z",
      correctX: 510,
      correctY: 160,
      isPlaced: false,
      fillColor: "#06B6D4",
      strokeColor: "#0E7490"
    },
    {
      id: 6,
      name: "Benue",
      svgPath: "M309.31,368.03L318.44,370.51L326.95,371.76L335.66,375.31L340.58,378.13L345.83,379.12L346.9,378.98L350.22,381.78L355.55,384.01L356.69,382.91L356.78,381.55L352.08,369.91L352,367.39L353.02,364.53L354.26,363.12L358.21,360.92L359.59,360.64L362.18,360.46L364.86,360.9L374.95,364.62L381.81,366.17L386.69,366.58L390.65,366.36L390.66,365.66L402.45,374.59L402.45,374.59L398.66,380.56L400.56,381.13L406.68,378.5L414.15,377.55L422.33,378.03L429.81,380.61L432.3,382.88L435.77,389.11L438.21,390.29L439.21,393.17L442.75,396.68L442.75,396.68L436.74,398.1L433.92,399.7L433.03,400.67L433.52,402.81L431.87,404.89L426.76,406.53L424.46,408.55L421.42,414.78L418.67,418.42L414.66,419.96L411.68,422.03L411.34,422.53L411.26,424.1L409.98,428.26L408.25,430.38L408.14,431.45L409.4,436.72L409.07,438.23L409.07,438.23L397.9,437.27L389.72,434.93L377.8,430.15L374.15,424.67L369.32,418.97L361.94,415.38L361.14,413.46L361.67,411.86L361.3,410.97L359.62,410.79L357.29,409.35L355.79,407.33L355.45,405.48L352.47,403.67L349.11,399.35L343.96,396.52L341.55,396.27L339.65,398.66L339.28,400.21L337.76,401.32L334.33,402.85L332.52,402.51L329.33,403.15L328.35,404.81L327.56,405.15L323.65,403.63L323.65,403.63L322.71,402.74L321.31,394.2L320.38,392.07L318.82,390.13L318.14,388.21L318.74,384.82L319.54,382.74L320.98,380.85L321.03,379.09L318.83,377.13L318.01,375.28L317.58,374.86L314.25,374.72L311.47,371.82L309.31,368.03z",
      correctX: 370,
      correctY: 390,
      isPlaced: false,
      fillColor: "#4F46E5",
      strokeColor: "#312E81"
    },
    {
      id: 7,
      name: "Borno",
      svgPath: "M661.8,11.35L662.5,17L661.67,20L665.16,26.26L664.96,28.78L664.5,29.27L664.78,27.1L663.74,28.43L663.52,30.35L665.9,32.9L668.36,33.51L667.71,34.18L667.99,34.72L668.77,34.91L673.23,42.44L676.06,45.52L677.11,45.74L678.83,46.7L680.46,47.9L684.33,48.65L684.59,49.51L684.01,49.5L683.45,50.6L683.25,49.56L682.59,50.14L681.85,50.1L683.29,51.7L683.56,53.46L687.44,52.3L689.75,49.69L692.22,47.67L693.82,47L692.74,48.76L692.89,49.21L693.54,49.02L694.62,45.72L696.97,44.71L699.52,43.88L700.87,43.91L703.42,43.18L705.18,43.04L707.11,42.6L708.57,42.01L709.95,40.54L710.75,40.23L712.23,40.21L713.26,39.72L714.39,38.79L714.89,38.05L715.42,36.08L714.4,35.05L714.22,33.88L714.77,32.73L715.85,31.59L716.46,30.73L716.75,29.02L717.04,28.59L718.12,28.2L724.44,28.16L730.77,29.61L731.24,31.25L731.07,33.08L730.38,33.95L730.75,35.66L732.92,35.71L733.92,35.38L734.94,34.61L737.71,32.27L739.03,31.91L741.51,32.11L743.34,33.04L744.07,33.82L744.42,35.01L744.36,36.42L745.69,37.39L746.86,39.7L747.28,40.55L748.21,40.96L751.97,39.9L754.22,39.77L755.84,36.72L757.5,35.44L764.66,32.79L767.35,33.03L769.25,33.65L772.17,35.55L772.17,35.55L768.91,39.5L767.1,40.84L766.37,43.61L765.21,44.68L764.28,46.5L762.84,48.19L759.89,49.64L756.21,54.33L755.62,57.73L755.69,59.97L756.66,64.83L756.68,69.04L756.42,70.5L754.94,71.98L753.58,74.22L751.85,80.48L750.91,82.6L748.35,85.81L747.58,88.34L747.72,90.35L746.16,92.64L745.59,95.72L746.24,99.03L747.97,102.1L748.56,104.27L748.33,109.31L747.69,112.69L747.85,115.58L748.68,118.21L748.53,122.03L748.9,127.35L750.35,133.04L751.78,135.5L753.3,136.17L756.58,137.44L757.62,139.13L757.95,141.38L757.92,145.37L757.5,147.29L756.1,149.84L754.81,155.46L754.76,158.83L754.05,164.29L754.28,168.01L754.88,169.95L755.93,171.57L758.64,173.54L761.51,175.78L762.15,176.63L763.09,180.03L764.14,181.9L764.98,184.06L764.76,186.55L764.25,188.33L762.03,189.23L755.78,189.3L754.76,189.53L753.32,190.81L752.74,192.86L751.37,193.51L751.04,197.08L751.25,199.91L746.16,199.21L741.85,196.42L738.48,196.01L737.83,197.17L736.88,201.01L735.21,202.96L732.88,204.67L731.69,206.46L729.61,213.11L727.74,217.39L725.88,220.29L723.01,222.75L720.69,226.1L719.23,226.98L718.12,228.2L716.94,230.23L715.91,230.76L714.8,232.43L713.34,236.71L713.38,241.42L712.55,241.15L712.46,242.63L715.56,247.64L714.95,249.54L712.98,252.06L712.74,254.01L714.86,257.36L713.81,257.86L713.4,258.93L712.66,261.34L712.12,261.9L712.12,261.9L706.55,264.56L703.38,264.54L701.51,265.26L698.45,264.71L696.63,264.88L691.84,267.05L689.83,267.47L687.77,267.27L686.73,267.81L684.03,270.01L681.61,270.26L679.26,270.04L677.1,271.06L672.38,269.8L671.96,268.89L669.49,268.98L665.07,270.75L657.35,270.58L657.42,269.2L656.49,267.55L656.59,261.33L657.05,258.58L657.05,256.35L654.32,254.5L653.63,252.9L653.66,251.13L655.51,249.74L656.66,247L656.62,246.36L655.08,244.74L654.93,243.76L659.11,237.88L664.98,236.72L666.42,234.11L668.03,233.07L668.29,230.05L670.34,227.48L671.12,225.54L670.99,222.09L671.96,220.42L672.22,215.81L673.83,214.15L673.83,212.45L673.06,211.39L672.34,207.78L672.95,204.77L673.43,203.67L676.09,201.22L677.45,196.33L679.22,193.43L680.32,192.6L681.34,191.03L682.16,189.27L682.29,187.44L682.29,187.44L672.91,141.84L672.17,142.49L670.28,145.09L669.31,145.33L666.93,147.78L671.18,149.9L672.03,149.39L674.3,148.22L677.21,148.56L677.61,143.54L678.14,141.55L679.03,140.44L681.29,139.34L683.8,139.35L688.62,141.27L690.49,143.1L693.39,148.22L694.82,149.63L697.15,150.82L699.01,152.27L699.66,152.99L700.29,155.27L700.26,157.05L699.72,158.36L699.46,160.34L699.77,162.97L699.08,165.18L696.95,169.82L696.65,170.76L697.05,172.12L696.3,175.51L693.68,177.4L693.38,178.3L693.92,180.26L693.41,181.33L692.52,181.47L692.26,182.32L693.11,185.05L701.32,185.57L702.05,186.6L702.83,193.55L701.25,196.28L704.09,198.89L703.64,200.98L702.62,200.75L702.14,201.53L701.85,207.11L702.2,209.1L702.88,211.44L702.76,215.47L703.7,217.81L703.32,222.04L703.81,223.74L705.66,224.51L709.13,229.82L710.72,232.04L711.42,234.5L711.35,238.84L665.21,138.41L662.11,123.1L659.43,110.73L658.94,108.03L658.94,105.15L659.71,102.43L662.13,97.43L661.8,94.42L660.61,91.78L657.58,88.6L657.13,88.1L655.39,85.74L653.9,80.06L653.98,78.99L653.13,76.03L652.05,74.33L649.67,71.95L648.99,69.49L649.31,68.29L651.75,65.81L652.49,64.05L651.94,60.22L652.14,58.12L652.76,56.48L655.65,51.81L655.76,50.5L652.7,43.9L652.77,38.71L652.15,33.67L651.02,30.9L649.07,28.25L648.51,26.33L648.95,23.67L651.48,18.41L653.87,16.59L656.8,13.87L657.72,11.67L661.8,11.35z",
      correctX: 700,
      correctY: 130,
      isPlaced: false,
      fillColor: "#DDD6FE",
      strokeColor: "#5B21B6"
    },
    {
      id: 8,
      name: "Bayelsa",
      svgPath: "M250.87,579.58l-0.21,-0.62l-0.68,0.1l-3.96,-2.6l-1.2,-4.38l-1.38,-1.87l-1.99,-0.02l-6.54,2.54l-1.04,-0.26l-0.35,-1.94l0.42,-1.46l-3.31,-1.44l-0.5,-0.83l0.07,-4.34l1.9,-2.67l0.76,-2.05l0.03,-1.27l-1.29,0.16l-0.84,-0.78l1.33,-4.44l4.49,-7.84l2.77,0.17l0.55,-0.5l0.75,-2.49l1.54,-0.79l-0.23,-1.81l1.58,-1.07l0.95,-1.48l-0.03,-1.94l-0.63,-1.54l-0.76,-0.58l-1.92,-0.83l-2.94,0.49l-1.04,-0.28l0.77,2.47l-1.2,0.85l-5.08,2.19l-3.49,-0.44l-2.7,-1.29l-1.81,-0.08l-3.95,1.72l-3.3,0.07l-0.78,0.54l-2.52,3.58l-0.18,1.3l-0.85,1.5l-0.2,1.54l0.32,1.47l1.19,1.56l1.88,1.13l1.07,0.22l0.13,0.75l-1.69,1.43l-0.36,1.21l-0.32,3.48l-0.52,1.51l-1.76,2.64l-0.72,2.64l-0.28,2.41l0.49,3.36l0.98,2.2l1.53,1.66l2.27,4.03l1.51,1.84l3.84,3.57l2.71,0.49l1.94,-0.76l2.82,0.73l3.63,2.29l3.09,0.86l3.58,-1.84l0.82,-0.01l0.54,0.71l1.31,-0.25l0.7,-0.77l1.19,-0.06l1.03,0.61l1.5,-0.12l1.51,0.9l1.41,0.01l1.14,-0.78l1.16,-1.79L250.87,579.58z",
      correctX: 230,
      correctY: 560,
      isPlaced: false,
      fillColor: "#8B5CF6",
      strokeColor: "#5B21B6"
    },
    {
      id: 9,
      name: "Cross River",
      svgPath: "M348.13,451.4L351.12,450.91L353.48,448.95L354.84,447.2L356.76,446.75L358.82,447.42L362.66,447.56L365.79,446.73L368.93,444.81L368.16,440.31L369.68,439.11L371.79,438.44L374.1,437.85L376.21,437.92L381.64,439.61L390.28,444.99L390.84,446.63L390.18,451.4L391.39,452.29L395.77,452.73L405.34,450.49L408.43,450.71L409.92,451.43L415.45,457.16L420.33,463.79L420.98,465.34L420.98,465.34L418.81,473.68L413.66,471.47L412.88,473.31L412.86,475.29L411.7,476.8L409.96,477.47L409.47,478.21L409.52,482.67L407.91,485.61L407.28,488.63L406.84,496.1L404.89,500.07L402.87,507.18L399.68,516.48L398.98,522.77L399.02,529.25L398.11,532.12L394.45,537.45L393.48,537.75L392.51,537.33L391.03,535.71L390.77,532.92L389.51,530.45L385.71,525.35L382.32,522.68L379.72,521.75L376.83,522.67L372.89,525.6L368.6,530.78L367.96,532.24L366.14,548.59L366.14,548.59L364.31,549.42L359.22,550.11L358.28,549.35L358.28,549.35L355.13,545.04L353.94,542.9L351.76,542.05L350.96,540.65L351.09,539.1L350.08,537.09L347.5,534.63L345.83,531.63L344.94,526.39L344.34,523.22L344.3,514.96L343.68,510.34L344.35,508.17L344.35,506.52L343.85,505.04L334.89,499.48L334.6,496.97L335.43,493.62L336.37,492.49L336.47,491.14L336.24,488.49L336.63,487.47L339.45,485.08L341.08,482.25L341.1,480.3L341.76,478.7L342.99,478.05L343.72,476.7L344.61,476.15L344.93,474.47L344.78,471.32L346.15,466.72L347.03,464.91L347.98,464.29L348.17,463.48L347.36,459.37L347.44,456.22L348.13,451.4z",
      correctX: 380,
      correctY: 500,
      isPlaced: false,
      fillColor: "#A78BFA",
      strokeColor: "#5B21B6"
    },
    {
      id: 10,
      name: "Delta",
      svgPath: "M252.1,480.23l-1.48,-7.29l0.08,-1.37l-1.13,-1.13l-2.13,-9.57l-1.88,2.04l-4.1,-0.38l-3.73,0.81l-8.19,5.12l-7.35,3.1l-4.03,4.53l-0.64,0.05l-2.58,-3.94l-1.01,-0.42l-1.67,-0.31l-1.78,1.58l-0.89,2.03l-0.15,2.37l0.4,0.75l1.46,0.81l0.54,4.82l2.03,3.59l1.96,2.42l1.88,1.46l2.23,0.81l0.29,1.75l-0.7,3.24l-1.55,1.91l-1.63,1.66l-3.08,2.03l-2.29,3.07l-2.78,1.99l-1.81,0.6l-5.23,1.04l-2.13,-0.56l0.7,-1.8l-1.6,-1.61l2.04,-4.03l-0.47,-0.83l-3.91,-2.3l-0.93,-1.47l-0.41,-3.84l-1.37,-2.41l-1.93,-1.88l-2.14,-0.98l-1.76,0.15l-0.16,0.85l0.46,4.01l-0.69,0.52l-3.22,0.27l-2.04,-1.47l-1.73,-0.42l-1.4,0.36l-1.07,1.21l-1.62,3.18l1.98,2.59l1.16,3.58l-0.76,1.93l-0.88,1.11l-0.07,1.26l1.15,3.03l1.26,1.99l1.32,1.63l1.26,2.22l0.49,2.09l0.13,4.88l0.96,6.15l-0.04,2.21l-1.05,1.08l0.23,0.84l1.27,0.73l1.6,2.2l1.6,1.21l1.06,0.35l0.78,-0.21l0.89,-0.95l0.76,-2.05l-0.07,-2.03l0.8,-1.06l1.6,-1.19l0.57,0.21l1.29,3.01l2.62,3l1.79,1.1l0.76,0.98l1.26,2.22l1.17,1.05l1.98,1.06l1.44,0.23l0.64,-0.74l-0.13,-1.02l-0.69,-0.6l-0.81,-1.31l1.48,-0.36l3.01,2.09l1.76,2.06l1.89,1.07l2.36,0.93l2.18,0.37l2.13,-0.43l1.08,-0.65l0.89,-1.94l0.87,-0.5l5.02,-1.14l2.21,-1.29l1.11,-1.21l0.3,-1.89l0.92,-0.41l1.04,0.12l0.57,0.76l0.15,1.9l0.49,0.87l1.55,0.44l1.48,-0.73l2.01,-2.48l2.51,0.39l1.09,-0.08l2.43,-1.27l1.48,-1.63l-0.02,-2.81l0.47,-1.5l2.21,-1.84l0.94,-1.8l0.07,-2.5l-1.17,-1.36l3.37,-7.49l2.05,-2.84l1.63,-1.04l1.13,-1.59l0.85,-2.16l-0.17,-2.11l0.39,-1.34l-0.68,-3.54l0.2,-0.94l0.91,-0.79l1.26,-0.38l1.83,0.06l1.49,-1.92l1.21,-3.19l0.22,-1.47l-0.41,-1.16l2.14,-5.73l0.18,-1.12l-0.56,-1.3L252.1,480.23z",
      correctX: 215,
      correctY: 510,
      isPlaced: false,
      fillColor: "#C4B5FD",
      strokeColor: "#5B21B6"
    }
  ]
};

// modify the interface with any CRUD methods
// you might need

export interface IStorage {
  // User methods
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  
  // Country methods
  getAllCountries(): Promise<Country[]>;
  getCountry(id: number): Promise<Country | undefined>;
  createCountry(country: InsertCountry): Promise<Country>;
  
  // Region methods
  getRegionsByCountry(countryId: number): Promise<Region[]>;
  createRegion(region: InsertRegion): Promise<Region>;
  
  // Game session methods
  createGameSession(session: InsertGameSession): Promise<GameSession>;
  completeGameSession(id: number, hintsUsed: number, score: number): Promise<GameSession | undefined>;
  getTopScoresByCountry(countryId: number, limit?: number): Promise<GameSession[]>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private countries: Map<number, Country>;
  private regions: Map<number, Region[]>;
  private gameSessions: Map<number, GameSession>;
  private userIdCounter: number;
  private countryIdCounter: number;
  private regionIdCounter: number;
  private gameSessionIdCounter: number;

  constructor() {
    this.users = new Map();
    this.countries = new Map();
    this.regions = new Map();
    this.gameSessions = new Map();
    
    this.userIdCounter = 1;
    this.countryIdCounter = 1;
    this.regionIdCounter = 1;
    this.gameSessionIdCounter = 1;
    
    // Initialize with sample data
    this.initializeSampleData();
  }
  
  private initializeSampleData() {
    // Add initial countries
    initialCountries.forEach(country => {
      this.countries.set(country.id, {
        id: country.id,
        name: country.name,
        slug: country.slug,
        regionsCount: country.regionsCount,
        difficulty: country.difficulty,
        imageUrl: country.imageUrl || null,
        outlinePath: country.outlinePath
      });
      
      // Update counter to avoid ID conflicts
      if (country.id >= this.countryIdCounter) {
        this.countryIdCounter = country.id + 1;
      }
    });
    
    // Add initial regions using the local sampleRegions
    Object.entries(sampleRegions).forEach(([countryIdStr, regionsList]) => {
      const countryId = parseInt(countryIdStr, 10);
      const regionsArray = regionsList.map((region: RegionPiece) => {
        const regionObj: Region = {
          id: region.id,
          countryId: countryId,
          name: region.name,
          svgPath: region.svgPath,
          correctX: region.correctX,
          correctY: region.correctY,
          fillColor: region.fillColor,
          strokeColor: region.strokeColor
        };
        
        // Update counter to avoid ID conflicts
        if (region.id >= this.regionIdCounter) {
          this.regionIdCounter = region.id + 1;
        }
        
        return regionObj;
      });
      
      this.regions.set(countryId, regionsArray);
    });
  }

  // User methods
  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username,
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.userIdCounter++;
    const user: User = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }
  
  // Country methods
  async getAllCountries(): Promise<Country[]> {
    return Array.from(this.countries.values());
  }
  
  async getCountry(id: number): Promise<Country | undefined> {
    return this.countries.get(id);
  }
  
  async createCountry(insertCountry: InsertCountry): Promise<Country> {
    const id = this.countryIdCounter++;
    const country: Country = { 
      ...insertCountry, 
      id,
      imageUrl: insertCountry.imageUrl || null 
    };
    this.countries.set(id, country);
    return country;
  }
  
  // Region methods
  async getRegionsByCountry(countryId: number): Promise<Region[]> {
    return this.regions.get(countryId) || [];
  }
  
  async createRegion(insertRegion: InsertRegion): Promise<Region> {
    const id = this.regionIdCounter++;
    const region: Region = { ...insertRegion, id };
    
    // Add to regions map
    const existingRegions = this.regions.get(region.countryId) || [];
    this.regions.set(region.countryId, [...existingRegions, region]);
    
    return region;
  }
  
  // Game session methods
  async createGameSession(insertSession: InsertGameSession): Promise<GameSession> {
    const id = this.gameSessionIdCounter++;
    const gameSession: GameSession = { 
      ...insertSession, 
      id,
      userId: insertSession.userId || null,
      hintsUsed: insertSession.hintsUsed || 0,
      completedAt: null,
      score: null,
      isCompleted: false
    };
    
    this.gameSessions.set(id, gameSession);
    return gameSession;
  }
  
  async completeGameSession(id: number, hintsUsed: number, score: number): Promise<GameSession | undefined> {
    const session = this.gameSessions.get(id);
    if (!session) {
      return undefined;
    }
    
    const updatedSession: GameSession = {
      ...session,
      completedAt: new Date(),
      hintsUsed,
      score,
      isCompleted: true
    };
    
    this.gameSessions.set(id, updatedSession);
    return updatedSession;
  }
  
  async getTopScoresByCountry(countryId: number, limit: number = 10): Promise<GameSession[]> {
    return Array.from(this.gameSessions.values())
      .filter(session => session.countryId === countryId && session.isCompleted && session.score !== null)
      .sort((a, b) => {
        // Sort by score (descending)
        if (a.score !== null && b.score !== null) {
          return b.score - a.score;
        }
        return 0;
      })
      .slice(0, limit);
  }
}

export const storage = new MemStorage();
